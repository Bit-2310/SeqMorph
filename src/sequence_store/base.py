from __future__ import annotations
import logging
from typing import Protocol

logger = logging.getLogger("seqmorph.store")

class BaseStore(Protocol):
    """
    Abstract storage interface for biological sequences.
    Coordinates are 0-based, half-open [start, end).
    Implementations must be mutable and maintain length efficiently.
    """
    def __len__(self) -> int: ...
    def to_string(self) -> str: ...
    def slice(self, start: int, end: int) -> str: ...
    def get(self, pos: int) -> str: ...
    def set(self, pos: int, base: str) -> None: ...
    def replace_range(self, start: int, end: int, substring: str) -> None: ...
    def insert(self, pos: int, substring: str) -> None: ...
    def delete(self, start: int, end: int) -> None: ...
    def invert(self, start: int, end: int) -> None: ...
    def duplicate(self, start: int, end: int, insert_pos: int) -> None: ...
    def translocate(self, start: int, end: int, insert_pos: int) -> None: ...
